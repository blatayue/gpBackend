type Song {
  meta: GeniusMeta
  response: GeniusResponse
}

type GeniusMeta {
  status: Int
}
type GeniusResponse {
  hits(limit: Int): [GeniusHit]
}

type GeniusHit {
  highlights: [String]
  index: String
  type: String
  result: GeniusTrack
}

type GeniusTrack {
  id: ID!
  annotation_count: Int
  api_path: String
  full_title: String
  header_image_thumbnail_url: String
  header_image_url: String
  lyric_owner_id: Int
  lyrics_state: String
  path: String
  pyongs_count: Int
  song_art_thumbnail_url: String
  stats: GeniusStats
  title: String
  title_with_featured: String
  url: String
  primary_artist: GeniusArtist
  fullLyrics: [String]
  frequency: [CellInfo]
  uniqueLyrics: Int
  palette: Palette
}

type GeniusStats {
  hot: Boolean
  unreviewed_annotations: Int
  concurrents: Int
  pageview: Int
}

type GeniusArtist {
  id: ID!
  api_path: String
  header_image_url: String
  image_url: String
  is_meme_verified: Boolean
  is_verified: Boolean
  name: String
  url: String
}

type Mutation {
  searchGenius(query: String!): Song
  generateGrid(songInput: gridReq!): [[String]]
}

input gridReq {
  fullLyrics: [String]
  palette: Palette
  frequency: [CellInfo]
}

type lyricFrequency {
  frequency: [String]
  fullLyrics: [String]
  title: String
  uniqueLyrics: Int
  palette: String
  bodyColor(pathProp: ImagePath): String
  titleTextColor(pathProp: ImagePath): String
  grid(pathProp: ImagePath): [[String]]
}

enum ImagePath {
  header_image_thumbnail_url
  header_image_url
  song_art_thumbnail_url
}

type CellInfo {
  stem: String
  freq: Int
  originalWords: [String]
  indices: [Int]
}

type Pallete implements Palette {
}
input Palette implements Palette {
}
interface Palette {
  Vibrant: String
  DarkVibrant: String
  Muted: String
  LightMuted: String
  DarkMuted: String
}

schema {
  mutation: Mutation
}
type Query {
  searchGenius(query: String!): Song
}
