"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolvers = void 0;

var _dataloader = _interopRequireDefault(require("dataloader"));

var R = _interopRequireWildcard(require("ramda"));

var _Genius = require("../Genius");

var _lyricFrequency = require("./lyricFrequency");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const lyricLoader = new _dataloader.default(_lyricFrequency.makeFullLyrics);
const resolvers = {
  Query: {
    makePlayer: async (_, args) => {
      const geniusResponse = await (0, _Genius.geniusQuery)(args.query);
      return await geniusResponse.data;
    },
    searchGenius: async (_, args) => {
      const geniusResponse = await (0, _Genius.geniusQuery)(args.query);
      return await geniusResponse.data;
    },
    makePalette: async (_, args) => await (0, _lyricFrequency.pathPalette)(args.imagePath)
  },
  GeniusTrack: {
    frequency: obj => lyricLoader.load([obj.path]).then(_lyricFrequency.resolveFrequency),
    lyricCount: async obj => lyricLoader.load([obj.path]).then(arr => arr.length),
    dataArray: obj => lyricLoader.load([obj.path]).then(_lyricFrequency.resolveFrequency).then(_lyricFrequency.gatherPoints),
    fullLyrics: obj => lyricLoader.load([obj.path]),
    fullUniqueLyrics: obj => lyricLoader.load([obj.path]).then(arr => [...new Set(arr)]),
    fullUniqueLyricCount: obj => lyricLoader // get unique arr
    .load([obj.path]).then(arr => [...new Set(arr)].length),
    palette: obj => (0, _lyricFrequency.pathPalette)(obj.header_image_url),
    sentiment: obj => lyricLoader.load([obj.path]).then(_lyricFrequency.makeSentiment),
    repetitiveScore: obj => lyricLoader.load([obj.path]).then(_lyricFrequency.resolveFrequency).then(_lyricFrequency.gatherPoints).then(_lyricFrequency.makeRepetitiveScore)
  },
  GeniusResponse: {
    hits: async (obj, args) => await R.take(args.limit)(obj.hits)
  }
};
exports.resolvers = resolvers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9HZW5pdXMvZ2VuaXVzUmVzb2x2ZXIuanMiXSwibmFtZXMiOlsibHlyaWNMb2FkZXIiLCJEYXRhTG9hZGVyIiwibWFrZUZ1bGxMeXJpY3MiLCJyZXNvbHZlcnMiLCJRdWVyeSIsIm1ha2VQbGF5ZXIiLCJfIiwiYXJncyIsImdlbml1c1Jlc3BvbnNlIiwicXVlcnkiLCJkYXRhIiwic2VhcmNoR2VuaXVzIiwibWFrZVBhbGV0dGUiLCJpbWFnZVBhdGgiLCJHZW5pdXNUcmFjayIsImZyZXF1ZW5jeSIsIm9iaiIsImxvYWQiLCJwYXRoIiwidGhlbiIsInJlc29sdmVGcmVxdWVuY3kiLCJseXJpY0NvdW50IiwiYXJyIiwibGVuZ3RoIiwiZGF0YUFycmF5IiwiZ2F0aGVyUG9pbnRzIiwiZnVsbEx5cmljcyIsImZ1bGxVbmlxdWVMeXJpY3MiLCJTZXQiLCJmdWxsVW5pcXVlTHlyaWNDb3VudCIsInBhbGV0dGUiLCJoZWFkZXJfaW1hZ2VfdXJsIiwic2VudGltZW50IiwibWFrZVNlbnRpbWVudCIsInJlcGV0aXRpdmVTY29yZSIsIm1ha2VSZXBldGl0aXZlU2NvcmUiLCJHZW5pdXNSZXNwb25zZSIsImhpdHMiLCJSIiwidGFrZSIsImxpbWl0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQVNBLE1BQU1BLFdBQVcsR0FBRyxJQUFJQyxtQkFBSixDQUFlQyw4QkFBZixDQUFwQjtBQUVPLE1BQU1DLFNBQVMsR0FBRztBQUN2QkMsRUFBQUEsS0FBSyxFQUFFO0FBQ0xDLElBQUFBLFVBQVUsRUFBRSxPQUFPQyxDQUFQLEVBQVVDLElBQVYsS0FBbUI7QUFDN0IsWUFBTUMsY0FBYyxHQUFHLE1BQU0seUJBQVlELElBQUksQ0FBQ0UsS0FBakIsQ0FBN0I7QUFDQSxhQUFPLE1BQU1ELGNBQWMsQ0FBQ0UsSUFBNUI7QUFDRCxLQUpJO0FBS0xDLElBQUFBLFlBQVksRUFBRSxPQUFPTCxDQUFQLEVBQVVDLElBQVYsS0FBbUI7QUFDL0IsWUFBTUMsY0FBYyxHQUFHLE1BQU0seUJBQVlELElBQUksQ0FBQ0UsS0FBakIsQ0FBN0I7QUFDQSxhQUFPLE1BQU1ELGNBQWMsQ0FBQ0UsSUFBNUI7QUFDRCxLQVJJO0FBU0xFLElBQUFBLFdBQVcsRUFBRSxPQUFPTixDQUFQLEVBQVVDLElBQVYsS0FBbUIsTUFBTSxpQ0FBWUEsSUFBSSxDQUFDTSxTQUFqQjtBQVRqQyxHQURnQjtBQVl2QkMsRUFBQUEsV0FBVyxFQUFFO0FBQ1hDLElBQUFBLFNBQVMsRUFBRUMsR0FBRyxJQUFJaEIsV0FBVyxDQUFDaUIsSUFBWixDQUFpQixDQUFDRCxHQUFHLENBQUNFLElBQUwsQ0FBakIsRUFBNkJDLElBQTdCLENBQWtDQyxnQ0FBbEMsQ0FEUDtBQUVYQyxJQUFBQSxVQUFVLEVBQUUsTUFBTUwsR0FBTixJQUNWaEIsV0FBVyxDQUFDaUIsSUFBWixDQUFpQixDQUFDRCxHQUFHLENBQUNFLElBQUwsQ0FBakIsRUFBNkJDLElBQTdCLENBQWtDRyxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsTUFBN0MsQ0FIUztBQUlYQyxJQUFBQSxTQUFTLEVBQUVSLEdBQUcsSUFDWmhCLFdBQVcsQ0FDUmlCLElBREgsQ0FDUSxDQUFDRCxHQUFHLENBQUNFLElBQUwsQ0FEUixFQUVHQyxJQUZILENBRVFDLGdDQUZSLEVBR0dELElBSEgsQ0FHUU0sNEJBSFIsQ0FMUztBQVNYQyxJQUFBQSxVQUFVLEVBQUVWLEdBQUcsSUFBSWhCLFdBQVcsQ0FBQ2lCLElBQVosQ0FBaUIsQ0FBQ0QsR0FBRyxDQUFDRSxJQUFMLENBQWpCLENBVFI7QUFVWFMsSUFBQUEsZ0JBQWdCLEVBQUVYLEdBQUcsSUFDbkJoQixXQUFXLENBQUNpQixJQUFaLENBQWlCLENBQUNELEdBQUcsQ0FBQ0UsSUFBTCxDQUFqQixFQUE2QkMsSUFBN0IsQ0FBa0NHLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSU0sR0FBSixDQUFRTixHQUFSLENBQUosQ0FBekMsQ0FYUztBQVlYTyxJQUFBQSxvQkFBb0IsRUFBRWIsR0FBRyxJQUN2QmhCLFdBQVcsQ0FBQztBQUFELEtBQ1JpQixJQURILENBQ1EsQ0FBQ0QsR0FBRyxDQUFDRSxJQUFMLENBRFIsRUFFR0MsSUFGSCxDQUVRRyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUlNLEdBQUosQ0FBUU4sR0FBUixDQUFKLEVBQWtCQyxNQUZqQyxDQWJTO0FBZ0JYTyxJQUFBQSxPQUFPLEVBQUVkLEdBQUcsSUFBSSxpQ0FBWUEsR0FBRyxDQUFDZSxnQkFBaEIsQ0FoQkw7QUFpQlhDLElBQUFBLFNBQVMsRUFBRWhCLEdBQUcsSUFBSWhCLFdBQVcsQ0FBQ2lCLElBQVosQ0FBaUIsQ0FBQ0QsR0FBRyxDQUFDRSxJQUFMLENBQWpCLEVBQTZCQyxJQUE3QixDQUFrQ2MsNkJBQWxDLENBakJQO0FBa0JYQyxJQUFBQSxlQUFlLEVBQUVsQixHQUFHLElBQ2xCaEIsV0FBVyxDQUNSaUIsSUFESCxDQUNRLENBQUNELEdBQUcsQ0FBQ0UsSUFBTCxDQURSLEVBRUdDLElBRkgsQ0FFUUMsZ0NBRlIsRUFHR0QsSUFISCxDQUdRTSw0QkFIUixFQUlHTixJQUpILENBSVFnQixtQ0FKUjtBQW5CUyxHQVpVO0FBcUN2QkMsRUFBQUEsY0FBYyxFQUFFO0FBQ2RDLElBQUFBLElBQUksRUFBRSxPQUFPckIsR0FBUCxFQUFZVCxJQUFaLEtBQXFCLE1BQU0rQixDQUFDLENBQUNDLElBQUYsQ0FBT2hDLElBQUksQ0FBQ2lDLEtBQVosRUFBbUJ4QixHQUFHLENBQUNxQixJQUF2QjtBQURuQjtBQXJDTyxDQUFsQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEYXRhTG9hZGVyIGZyb20gJ2RhdGFsb2FkZXInXHJcbmltcG9ydCAqIGFzIFIgZnJvbSAncmFtZGEnXHJcbmltcG9ydCB7Z2VuaXVzUXVlcnl9IGZyb20gJy4uL0dlbml1cydcclxuaW1wb3J0IHtcclxuICBnYXRoZXJQb2ludHMsXHJcbiAgcGF0aFBhbGV0dGUsXHJcbiAgbWFrZVJlcGV0aXRpdmVTY29yZSxcclxuICBtYWtlRnVsbEx5cmljcyxcclxuICByZXNvbHZlRnJlcXVlbmN5LFxyXG4gIG1ha2VTZW50aW1lbnQsXHJcbn0gZnJvbSAnLi9seXJpY0ZyZXF1ZW5jeSdcclxuXHJcbmNvbnN0IGx5cmljTG9hZGVyID0gbmV3IERhdGFMb2FkZXIobWFrZUZ1bGxMeXJpY3MpXHJcblxyXG5leHBvcnQgY29uc3QgcmVzb2x2ZXJzID0ge1xyXG4gIFF1ZXJ5OiB7XHJcbiAgICBtYWtlUGxheWVyOiBhc3luYyAoXywgYXJncykgPT4ge1xyXG4gICAgICBjb25zdCBnZW5pdXNSZXNwb25zZSA9IGF3YWl0IGdlbml1c1F1ZXJ5KGFyZ3MucXVlcnkpXHJcbiAgICAgIHJldHVybiBhd2FpdCBnZW5pdXNSZXNwb25zZS5kYXRhXHJcbiAgICB9LFxyXG4gICAgc2VhcmNoR2VuaXVzOiBhc3luYyAoXywgYXJncykgPT4ge1xyXG4gICAgICBjb25zdCBnZW5pdXNSZXNwb25zZSA9IGF3YWl0IGdlbml1c1F1ZXJ5KGFyZ3MucXVlcnkpXHJcbiAgICAgIHJldHVybiBhd2FpdCBnZW5pdXNSZXNwb25zZS5kYXRhXHJcbiAgICB9LFxyXG4gICAgbWFrZVBhbGV0dGU6IGFzeW5jIChfLCBhcmdzKSA9PiBhd2FpdCBwYXRoUGFsZXR0ZShhcmdzLmltYWdlUGF0aCksXHJcbiAgfSxcclxuICBHZW5pdXNUcmFjazoge1xyXG4gICAgZnJlcXVlbmN5OiBvYmogPT4gbHlyaWNMb2FkZXIubG9hZChbb2JqLnBhdGhdKS50aGVuKHJlc29sdmVGcmVxdWVuY3kpLFxyXG4gICAgbHlyaWNDb3VudDogYXN5bmMgb2JqID0+XHJcbiAgICAgIGx5cmljTG9hZGVyLmxvYWQoW29iai5wYXRoXSkudGhlbihhcnIgPT4gYXJyLmxlbmd0aCksXHJcbiAgICBkYXRhQXJyYXk6IG9iaiA9PlxyXG4gICAgICBseXJpY0xvYWRlclxyXG4gICAgICAgIC5sb2FkKFtvYmoucGF0aF0pXHJcbiAgICAgICAgLnRoZW4ocmVzb2x2ZUZyZXF1ZW5jeSlcclxuICAgICAgICAudGhlbihnYXRoZXJQb2ludHMpLFxyXG4gICAgZnVsbEx5cmljczogb2JqID0+IGx5cmljTG9hZGVyLmxvYWQoW29iai5wYXRoXSksXHJcbiAgICBmdWxsVW5pcXVlTHlyaWNzOiBvYmogPT5cclxuICAgICAgbHlyaWNMb2FkZXIubG9hZChbb2JqLnBhdGhdKS50aGVuKGFyciA9PiBbLi4ubmV3IFNldChhcnIpXSksXHJcbiAgICBmdWxsVW5pcXVlTHlyaWNDb3VudDogb2JqID0+XHJcbiAgICAgIGx5cmljTG9hZGVyIC8vIGdldCB1bmlxdWUgYXJyXHJcbiAgICAgICAgLmxvYWQoW29iai5wYXRoXSlcclxuICAgICAgICAudGhlbihhcnIgPT4gWy4uLm5ldyBTZXQoYXJyKV0ubGVuZ3RoKSxcclxuICAgIHBhbGV0dGU6IG9iaiA9PiBwYXRoUGFsZXR0ZShvYmouaGVhZGVyX2ltYWdlX3VybCksXHJcbiAgICBzZW50aW1lbnQ6IG9iaiA9PiBseXJpY0xvYWRlci5sb2FkKFtvYmoucGF0aF0pLnRoZW4obWFrZVNlbnRpbWVudCksXHJcbiAgICByZXBldGl0aXZlU2NvcmU6IG9iaiA9PlxyXG4gICAgICBseXJpY0xvYWRlclxyXG4gICAgICAgIC5sb2FkKFtvYmoucGF0aF0pXHJcbiAgICAgICAgLnRoZW4ocmVzb2x2ZUZyZXF1ZW5jeSlcclxuICAgICAgICAudGhlbihnYXRoZXJQb2ludHMpXHJcbiAgICAgICAgLnRoZW4obWFrZVJlcGV0aXRpdmVTY29yZSksXHJcbiAgfSxcclxuICBHZW5pdXNSZXNwb25zZToge1xyXG4gICAgaGl0czogYXN5bmMgKG9iaiwgYXJncykgPT4gYXdhaXQgUi50YWtlKGFyZ3MubGltaXQpKG9iai5oaXRzKSxcclxuICB9LFxyXG59XHJcbiJdfQ==