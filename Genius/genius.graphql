type Song {
  meta: GeniusMeta
  response: GeniusResponse
}

type GeniusMeta {
  status: Int
}
type GeniusResponse {
  hits: [GeniusHit]
}

type GeniusHit {
  highlights: [String]
  index: String
  type: String
  result: GeniusTrack
}

type GeniusTrack {
  id: ID!
  annotation_count: Int
  api_path: String
  full_title: String
  header_image_thumbnail_url: String
  header_image_url: String
  lyric_owner_id: Int
  lyrics_state: String
  path: String
  pyongs_count: Int
  song_art_thumbnail_url: String
  stats: GeniusStats
  title: String
  title_with_featured: String
  url: String
  primary_artist: GeniusArtist
}

input SongInput {
  id: ID!
  path: String
  title: String
  artist: ArtistInput
}

input ArtistInput {
  name: String
}

type GeniusStats {
  hot: Boolean
  unreviewed_annotations: Int
  concurrents: Int
  pageview: Int
}
type GeniusArtist {
  id: ID!
  api_path: String
  header_image_url: String
  image_url: String
  is_meme_verified: Boolean
  is_verified: Boolean
  name: String
  url: String
}

type Query {
  searchGenius(query: String!, limit: Int): Song
}
type Mutation {
  makeFrequency(song: Song!): lyricFrequency
}

type lyricFrequency {
  frequency: [[cellInfo]]
  fullLyrics: [String]
  title: String
  artist: String
  image: String
  uniqueLytics: Int
  palette: String
  bodyColor: String
  titleTextColor: String
  grid: [[String]]
}

type cellInfo {
  stem: String
  freq: Int
  originalWords: [String]
  indices: [Int]
}
